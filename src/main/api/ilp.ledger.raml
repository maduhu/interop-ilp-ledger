#%RAML 1.0
title: ILP Ledger Adapter
version: v1
baseUri: https://localhost:8081/ilp-ledger/{version}

types:
  TransferState:
    enum: [ proposed, prepared, executed, cancelled ]

  Timeline:
    type: object
    properties:
      proposed_at?: string
      prepared_at?: string
      executed_at?: string

  PutAccountRequest:
    type: object
    properties:
      name: string
      balance: string

  PutAccountResponse:
    type: object
    properties:
      name: string
      balance: string
      id: string
      minimum_allowed_balance: string

  GetAccountsResponse:
    type: array
    items: object

  TransferRequest:
    type: object
    properties:
      id: string
      ledger: string
      execution_condition: string
      expires_at: string
      debits:
        type: array
        items: Debit
        minItems: 1
      credits:
        type: array
        items: Credit
        minItems: 1

  ProposeTransferRequest:
    type: TransferRequest

  ProposedTransferResponse:
    type: ProposeTransferRequest
    properties:
      state:
        enum: [ proposed ]

  PrepareTransferRequest:
    type: ProposeTransferRequest
    properties:
      debits:
        type: array
        items: AuthorizedDebit
        minItems: 1

  PreparedTransferResponse:
    type: PrepareTransferRequest
    properties:
      state:
        enum: [ prepared ]

  TransferResponse:
    type: TransferRequest
    properties:
      timeline:
        type: Timeline
        required: false

  TransferResponses:
    type: array
    items: TransferResponse
    minItems: 1

  Credit:
    type:  object
    properties:
      account: string
      amount: string

  Debit:
    type:  object
    properties:
      account: string
      amount: string

  AuthorizedDebit:
    type: Debit
    properties:
      authorized: boolean

  ConnectorDescriptor:
    type: object
    properties:
      id: string
      name: string
      connector: string

  Error:
    type: object
    properties:
      id: string
      message: string
      owner?: string   #used in insufficientFundsError
  
  UnmetConditionError:
    type: Error
    properties:
      condition?: string
      fulfillment?: string
  
  ValidationItem: #Each item in the array of validation Errors
    type: object
    properties:
      message: string
      params:
        type: object
        properties:
          pattern?: string
          key?: string
      code: integer
      dataPath: string
      schemaPath: string
      subErrors: string
      stack: string

  ValidationError:
    type: Error
    properties:
      validationErrors:
        type: array
        items: ValidationItem
        required: false
  
  #InvalidBodyError is same as below - only params field toggles between pattern and key
  InvalidUriParameterError: #HTTP/1.1 400 Bad Request
    type: Error
    properties:
      validationErrors:
        type: ValidationError
        
  InvalidBodyError: #HTTP/1.1 400 Bad Request
    type: InvalidUriParameterError

  TransferStateResponse:
    type: object
    properties:
      message:
        type: object
        properties:
          id: string
          state: string
      type: string
      signer: string
      public_key: string
      signature: string

/accounts:
  displayName: GET /v1/accounts
  get:
    description: Retrieve all accounts

    responses:
      200:
        body:
          application/json:
            type: GetAccountsResponse

  /{id}:
    displayName: POST /v1/accounts/:id
    uriParameters:
      id: string
    get:
      description: lookup an account

      responses:
          200:
            body:
              application/json:
                type: object
                properties:
                  id: string
                  name: string
                  #UnauthenticatedResponse
                  ledger:
                    type: string
                    required: false
                  #AuthenticatedResponse
                  balance:
                    type: string
                    required: false
                  is_disabled:
                    type: boolean
                    required: false

          400:  #InvalidUriParameterError
            body:
              application/json:
                description: HTTP/1.1 400 Bad Request
                type: InvalidUriParameterError

          404:  #NotFoundError
            body:
              application/json:
                description: HTTP/1.1 404 Not Found
                type: Error
    put:
      description: Create an account
      body:
        application/json:
          type:  PutAccountRequest

      responses:
        200:
          body:
            application/json:
              type: PutAccountResponse

        400:  #InvalidUriParameterError, InvalidBodyError
          body:
            application/json:
              description: HTTP/1.1 400 Bad Request
              type: InvalidUriParameterError

        403:  #UnauthorizedError
          description: HTTP/1.1 403 Forbidden
          body:
            application/json:
              type: Error

/transfers/{id}:
  displayName: POST /v1/transfers/:id
  uriParameters:
    id: string
  get:
    description: Transfer - Get local transfer object

    responses:
      200:
        body:
          application/json:
            type: TransferResponse

      400:  #InvalidUriParameterError
        body:
          application/json:
            description: HTTP/1.1 400 Bad Request
            type: InvalidUriParameterError

      404:  #NotFoundError
        body:
          application/json:
            description: HTTP/1.1 404 Not Found
            type: Error

  put:
    description:
    body:
      application/json:
        type: [ ProposeTransferRequest, PrepareTransferRequest ]
    responses:
      200:  #prepared success
        body:
          application/json:
            type: PreparedTransferResponse

      201:  #proposed success
        body:
          application/json:
            type: ProposedTransferResponse

      400:  #InvalidUriParameterError, InvalidBodyError
        body:
          application/json:
            description: HTTP/1.1 400 Bad Request
            type: InvalidUriParameterError

      422:  #InsufficientFundsError, UnprocessableEntityError, AlreadyExistsError
        body:
          application/json:
            description: HTTP/1.1 422 Unprocessable Entity
            type: Error

  /fulfillment:
      displayName: GET /v1/transfers/:id/fulfillment
      uriParameters:
        id: string
      put:
        description: Transfer - Execute a prepared transfer
        body:
          text/plain:
            type:  string
            example: "cf:0:_v8"

        responses:
          200:
            body:
              text/plain:
                type:  string
                example: "cf:0:_v8"

          400:  #InvalidUriParameterError, InvalidBodyError
            body:
              application/json:
                description: HTTP/1.1 400 Bad Request
                type: InvalidUriParameterError

          422:  #UnmetConditionError, UnprocessableEntityError
            body:
              application/json:
                description: HTTP/1.1 422 Unprocessable Entity
                type: UnmetConditionError

/connectors:
      displayName: GET /v1/connectors
      get:
        description: Get all accounts of all connectors on this ledger.

        responses:
          200:
            body:
              application/json:
                type: array
                items: ConnectorDescriptor
                minItems: 1
